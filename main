#!/usr/bin/env python3
import json
import http.client
import datetime
import sys
import os

DEBUG=False
defaultstop = "100636"

stopfile = os.path.dirname(os.path.realpath(__file__)) + "/stops"
baseurl  = "ivu.aseag.de"
url_s    = "/interfaces/ura/stream_V1"
url_i    = "/interfaces/ura/instant_V1"
filter   = "?ReturnList=StopPointName,StopID,StopPointState,StopPointIndicator,Latitude,Longitude,VisitNumber,TripID,VehicleID,LineID,LineName,DirectionID,DestinationName,DestinationText,EstimatedTime,BaseVersion"
filter_s = "&StopID={}"
filter_l = "&LineID={}"

if len(sys.argv) == 1:
	print('Usage: {} [Stop] [Bus IDs]'.format(__file__))

def tstodate(ts): #timestamp to date
	return datetime.datetime.fromtimestamp(ts*(10**(-3))).strftime('%Y-%m-%d %H:%M:%S')

def tstotime(ts): #timestamp to time
	return datetime.datetime.fromtimestamp(ts*(10**(-3))).strftime('%H:%M:%S')

def file2dict(fn): #file(name) to dict
	rtn = dict()
	with open(fn, 'r') as fh:
		for line in fh:
			(number, name) = line.split(' ', 1)
			rtn[number] = name
	return rtn

def debug(text):
	if DEBUG:
		print(text)

stops = file2dict(stopfile)

def parseargv(): #parses argv, returns StopID and LineID
	query_stop = defaultstop
	query_ids  = []
	argc = len(sys.argv)
	if argc >  1:
		for elem in sys.argv:
			if (elem == __file__):
				continue
			if (len(elem) == 6 and elem.isdigit()):
				query_stop = elem
			elif (1 <= len(elem) <= 3 and elem.isdigit()):
				query_ids.append(elem)
			else:
				print("Wait, what?: {}".format(elem))
	query_ids.sort(key=int)
	return (query_stop, query_ids)

def getjson():
	(stop, ids) = parseargv()
	stop_filter = filter_s.format(stop)
	if (ids == []):
		line_filter = ""
	else:
		line_filter = filter_l.format(",".join(ids))
	url = "{}{}{}{}".format(url_i,filter,stop_filter,line_filter)

	connection = http.client.HTTPConnection(baseurl)
	connection.request("GET", url)

	response = connection.getresponse()
	encoding = response.headers.get_content_charset()
	jsondata = response.read().splitlines()

	return (jsondata, encoding)

def parsejson(data):
	(jsondata, encoding) = data
	output = []
	for line in jsondata:
		linelist = json.loads(line.decode(encoding))
		if (linelist[0] == 1):
			output.append((linelist[15],linelist[8],linelist[12]))
	output.sort(key=lambda tup: tup[0])
	return output


debug('=== Start')
(query_stop, query_ids) = parseargv()
debug("Haltestelle:    {}\nHaltestellenID: {}\nLinien:         {}".format(stops[query_stop].strip(),query_stop," ".join(query_ids)))

debug('=== Get JSON')
jsondata = getjson()

debug('=== Parse JSON')
output = parsejson(jsondata)

debug('=== Output')
for line in output:
	print("{} {} {}".format(tstotime(line[0]), line[1], line[2]))
